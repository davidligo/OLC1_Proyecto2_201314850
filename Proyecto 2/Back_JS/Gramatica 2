ini
	: lista_clases  EOF 
    { 
        var raiz = new ast("ini",$1); 
        console.log(JSON.stringify(raiz));
    }
;

lista_clases
    : lista_clases clase_interfaz { let arreglo5 = []; arreglo5.push($1); arreglo5.push($2)   ; $$ = new ast("lista_clases",arreglo5);  ;}
    | clase_interfaz { $$ = new ast("lista_clases",$1); }
    | error PTCOMA { console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); }
;

clase_interfaz
    : RPUBLIC tipo_clase IDENTIFICADOR LLAVIZQ lista_instrucciones_clase LLAVDER { let arreglo4 = []; arreglo4.push($1); arreglo4.push($2); arreglo4.push($3); arreglo4.push($4); arreglo4.push($5); arreglo4.push($6); $$ = new ast("clase",arreglo4);  }
;


tipo_clase 
    : RCLASS  { $$ = new ast("tipo_clase",$1);  }
    | RINTERFACE { $$ = new ast("tipo_clase",$1);  }
;


lista_instrucciones_clase
    : lista_instrucciones_clase instrucciones_clase { let arreglolista_instruccionesclase = []; arreglolista_instruccionesclase.push($1); arreglolista_instruccionesclase.push($2); $$ = new ast("lista_instrucciones_clase", arreglolista_instruccionesclase); }
    | instrucciones_clase { $$ = new ast("lista_instrucciones_clase",$1);  }
;

instrucciones_clase
    : declaracion PTCOMA { let arregloinstrucciones_clase = []; arregloinstrucciones_clase.push($1); arregloinstrucciones_clase.push($2); $$ = new ast("instrucciones_clase", arregloinstrucciones_clase); }
    | metodo_funcion { $$ = new ast("instrucciones_clase",$1);  }
;

metodo_funcion
    : RPUBLIC tipo_funcion IDENTIFICADOR PARIZQ lista_parametros PARDER  { arreglometodo_funcion= []; arreglometodo_funcion.push($1); arreglometodo_funcion.push($2); arreglometodo_funcion.push($3); arreglometodo_funcion.push($4); arreglometodo_funcion.push($5); arreglometodo_funcion.push($6); $$ = new ast("metodo_funcion", arreglometodo_funcion); }
;

lista_parametros
    : lista_parametros COMA parametro   { arreglolista_parametros = []; arreglolista_parametros.push($1); arreglolista_parametros.push($2); arreglolista_parametros.push($3);  $$ = new ast("lista_parametros", arreglolista_parametros); }
    | parametro                         { $$ = new ast("lista_parametros",$1); }
;

parametro
    : tipo_variable IDENTIFICADOR { arregloparametro = []; arregloparametro.push($1); arregloparametro.push($2); $$ = new ast("parametro", arregloparametro); }
;


tipo_funcion
    : RVOID             { $$ = new ast("tipo_funcion",$1); }
    | tipo_variable     { $$ = new ast("tipo_funcion",$1); }
;

declaracion
    : tipo_variable lista_declaraciones { let arreglodeclaracion = []; arreglodeclaracion.push($1); arreglodeclaracion.push($2); $$ = new ast("declaracion", arreglodeclaracion); }
;

tipo_variable
    : RINT      { $$ = new ast("tipo_variable",$1); }
    | RBOOLEAN  { $$ = new ast("tipo_variable",$1); }
    | RDOUBLE   { $$ = new ast("tipo_variable",$1); }
    | RSTRING   { $$ = new ast("tipo_variable",$1); }
    | RCHAR     { $$ = new ast("tipo_variable",$1); }
;

lista_declaraciones
    : lista_declaraciones COMA declaraciones { let arreglolista_declaraciones = []; arreglolista_declaraciones.push($1); arreglolista_declaraciones.push($2); arreglolista_declaraciones.push($3); $$ = new ast("lista_declaraciones", arreglolista_declaraciones); }
    | declaraciones { $$ = new ast("lista_declaraciones",$1); }
;

declaraciones
    : IDENTIFICADOR IGUAL expresion_numerica    { let arreglodeclaraciones = []; arreglodeclaraciones.push($1); arreglodeclaraciones.push($2); arreglodeclaraciones.push($3); $$ = new ast("declaraciones", arreglodeclaraciones); }
    | IDENTIFICADOR                             { $$ = new ast("declaraciones",$1); }
;

expresion_numerica
	: MENOS expresion_numerica %prec UMENOS				{ let arregloexpresion_numerica1 = []; arregloexpresion_numerica1.push($1); arregloexpresion_numerica1.push($2); $$ = new ast("expresion_numerica", arregloexpresion_numerica1);  }
	| PARIZQ expresion_numerica PARDER					{ let arregloexpresion_numerica2 = []; arregloexpresion_numerica2.push($1); arregloexpresion_numerica2.push($2); arregloexpresion_numerica2.push($3); $$ = new ast("expresion_numerica", arregloexpresion_numerica2);  }
	| ENTERO											{ $$ = new ast("expresion_numerica",$1); }
	| DECIMAL											{ $$ = new ast("expresion_numerica",$1); }
	| expresion_numerica MAS expresion_numerica			{ let arregloexpresion_numerica3 = []; arregloexpresion_numerica3.push($1); arregloexpresion_numerica3.push($2); arregloexpresion_numerica3.push($3); $$ = new ast("expresion_numerica", arregloexpresion_numerica3);}
	| expresion_numerica MENOS expresion_numerica		{ let arregloexpresion_numerica4 = []; arregloexpresion_numerica4.push($1); arregloexpresion_numerica4.push($2); arregloexpresion_numerica4.push($3); $$ = new ast("expresion_numerica", arregloexpresion_numerica4);}
	| expresion_numerica POR expresion_numerica			{ let arregloexpresion_numerica5 = []; arregloexpresion_numerica5.push($1); arregloexpresion_numerica5.push($2); arregloexpresion_numerica5.push($3); $$ = new ast("expresion_numerica", arregloexpresion_numerica5);}
	| expresion_numerica DIVIDIDO expresion_numerica	{ let arregloexpresion_numerica6 = []; arregloexpresion_numerica6.push($1); arregloexpresion_numerica6.push($2); arregloexpresion_numerica6.push($3); $$ = new ast("expresion_numerica", arregloexpresion_numerica6);}
	| IDENTIFICADOR										{ $$ = new ast("expresion_numerica",$1); }
;