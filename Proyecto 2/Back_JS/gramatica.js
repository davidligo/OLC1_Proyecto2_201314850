/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,4],$V2=[2,5,7],$V3=[1,22],$V4=[1,24],$V5=[1,28],$V6=[1,25],$V7=[1,26],$V8=[1,27],$V9=[1,29],$Va=[1,33],$Vb=[2,7,15,30,71,72,73,74],$Vc=[1,41],$Vd=[1,40],$Ve=[1,44],$Vf=[2,9],$Vg=[7,15],$Vh=[13,67],$Vi=[1,59],$Vj=[1,64],$Vk=[1,61],$Vl=[1,60],$Vm=[1,62],$Vn=[1,63],$Vo=[1,65],$Vp=[1,66],$Vq=[1,69],$Vr=[1,70],$Vs=[1,67],$Vt=[1,72],$Vu=[13,33,67],$Vv=[1,76],$Vw=[1,75],$Vx=[1,77],$Vy=[1,78],$Vz=[1,79],$VA=[1,80],$VB=[1,81],$VC=[1,82],$VD=[1,83],$VE=[1,84],$VF=[1,87],$VG=[13,33,67,77,80,81,82,86,87,88,89,90,91,95,96,97],$VH=[13,33,67,95,96,97],$VI=[1,98],$VJ=[1,116],$VK=[1,142],$VL=[1,140],$VM=[1,141],$VN=[1,139],$VO=[1,138],$VP=[1,137],$VQ=[1,136],$VR=[1,143],$VS=[1,134],$VT=[13,14],$VU=[33,67],$VV=[13,33,67,77,80,86,87,88,89,90,91,95,96,97],$VW=[9,15,30,45,46,47,49,51,52,57,58,71,72,73,74],$VX=[1,158],$VY=[13,33],$VZ=[9,15,30,45,46,47,49,51,52,56,57,58,71,72,73,74];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"lista_clases":4,"EOF":5,"clase_interfaz":6,"RPUBLIC":7,"RCLASS":8,"IDENTIFICADOR":9,"bloqueclase_interfaz":10,"RINTERFACE":11,"bloqueinterfaz":12,"PTCOMA":13,"LLAVIZQ":14,"LLAVDER":15,"lista_instrucciones_interfaz":16,"instrucciones_interfaz":17,"tipo_funcion":18,"bloqueparametros":19,"lista_instrucciones_clase":20,"tipo_clase":21,"instrucciones_clase":22,"declaracion":23,"metodo_funcion":24,"bloquemetodo_funcion":25,"RSTATIC":26,"RVOID":27,"RMAIN":28,"PARIZQ":29,"RSTRING":30,"CORIZQ":31,"CORDER":32,"PARDER":33,"lista_parametros":34,"lista_instrucciones":35,"instrucciones":36,"asignacion_for":37,"imprimir":38,"sentencia_if":39,"sentencia_for":40,"sentencia_while":41,"sentencia_do":42,"sentencia_return":43,"sentencia_continuebreak":44,"RCONTINUE":45,"RBREAK":46,"RRETURN":47,"expresion":48,"RDO":49,"bloque":50,"RWHILE":51,"RFOR":52,"expresion_logica":53,"asignacion":54,"lista_condicionesIf":55,"RELSE":56,"RIF":57,"RSYSTEM":58,"PUNTO":59,"ROUT":60,"tipo_imprimir":61,"RPRINTLN":62,"RPRINT":63,"IGUAL":64,"MASMAS":65,"MENOSMENOS":66,"COMA":67,"parametro":68,"tipo_variable":69,"lista_declaraciones":70,"RINT":71,"RBOOLEAN":72,"RDOUBLE":73,"RCHAR":74,"declaraciones":75,"expresion_numerica":76,"MENOS":77,"ENTERO":78,"DECIMAL":79,"MAS":80,"POR":81,"DIVIDIDO":82,"CADENA":83,"CARACTER":84,"expresion_relacional":85,"MENQUE":86,"MAYQUE":87,"MENIGQUE":88,"MAYIGQUE":89,"DOBLEIG":90,"NOIG":91,"RTRUE":92,"RFALSE":93,"NOT":94,"AND":95,"OR":96,"XOR":97,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"RPUBLIC",8:"RCLASS",9:"IDENTIFICADOR",11:"RINTERFACE",13:"PTCOMA",14:"LLAVIZQ",15:"LLAVDER",26:"RSTATIC",27:"RVOID",28:"RMAIN",29:"PARIZQ",30:"RSTRING",31:"CORIZQ",32:"CORDER",33:"PARDER",45:"RCONTINUE",46:"RBREAK",47:"RRETURN",49:"RDO",51:"RWHILE",52:"RFOR",56:"RELSE",57:"RIF",58:"RSYSTEM",59:"PUNTO",60:"ROUT",62:"RPRINTLN",63:"RPRINT",64:"IGUAL",65:"MASMAS",66:"MENOSMENOS",67:"COMA",71:"RINT",72:"RBOOLEAN",73:"RDOUBLE",74:"RCHAR",77:"MENOS",78:"ENTERO",79:"DECIMAL",80:"MAS",81:"POR",82:"DIVIDIDO",83:"CADENA",84:"CARACTER",86:"MENQUE",87:"MAYQUE",88:"MENIGQUE",89:"MAYIGQUE",90:"DOBLEIG",91:"NOIG",92:"RTRUE",93:"RFALSE",94:"NOT",95:"AND",96:"OR",97:"XOR"},
productions_: [0,[3,2],[4,2],[4,1],[6,4],[6,4],[6,2],[12,2],[12,3],[16,2],[16,1],[17,5],[10,2],[10,3],[21,1],[21,1],[20,2],[20,1],[22,2],[22,1],[22,2],[24,5],[24,11],[19,2],[19,3],[25,2],[25,3],[35,2],[35,1],[36,2],[36,2],[36,1],[36,1],[36,1],[36,1],[36,1],[36,2],[44,1],[44,1],[43,3],[42,7],[41,5],[40,9],[39,3],[39,1],[55,7],[55,5],[50,2],[50,3],[38,8],[61,1],[61,1],[37,1],[37,1],[54,3],[54,2],[54,2],[34,3],[34,1],[68,2],[18,1],[18,1],[23,2],[69,1],[69,1],[69,1],[69,1],[69,1],[70,3],[70,1],[75,3],[75,1],[75,2],[48,1],[48,1],[48,2],[76,2],[76,3],[76,1],[76,1],[76,3],[76,3],[76,3],[76,3],[76,2],[76,2],[76,1],[76,1],[76,1],[85,3],[85,3],[85,3],[85,3],[85,3],[85,3],[85,1],[85,1],[53,2],[53,3],[53,3],[53,3],[53,3],[53,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 
        var raiz = new ast("ini",new Array($$[$0-1])); 
        //console.log(JSON.stringify(raiz));
        var nuevaListaTokens = listaTokens;
        var nuevaListaErroresL = errores_lexicos;
        var nuevaListaErroresS = errores_sintacticos;
        listaTokens = [];
        errores_lexicos = [];
        errores_sintacticos = [];
        return new crearRespuesta(nuevaListaTokens, nuevaListaErroresL, nuevaListaErroresS, raiz);
    
break;
case 2:
 let arreglo5 = []; arreglo5.push($$[$0-1]); arreglo5.push($$[$0])   ; this.$ = new ast("lista_clases",arreglo5);  ;
break;
case 3:
 this.$ = new ast("lista_clases",new Array($$[$0])); 
break;
case 4:
 let arreglo4 = []; arreglo4.push($$[$0-3]); arreglo4.push($$[$0-2]); arreglo4.push($$[$0-1]); arreglo4.push($$[$0]); this.$ = new ast("clase_interfaz",arreglo4);  
break;
case 5:
 let arreglo42 = []; arreglo42.push($$[$0-3]); arreglo42.push($$[$0-2]); arreglo42.push($$[$0-1]); arreglo42.push($$[$0]); this.$ = new ast("clase_interfaz",arreglo42);  
break;
case 6:
 console.error('Este es un error clase_interfaz sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
                        errores_sintacticos.push(new crearErrorS("Error sintactico "+ yytext + " en clase_interfaz ", this._$.first_line, this._$.first_column));
                    
break;
case 7:
 let arreglobloqueinterfaz1 = []; arreglobloqueinterfaz1.push($$[$0-1]); arreglobloqueinterfaz1.push($$[$0]); this.$ = new ast("bloqueinterfaz",arreglobloqueinterfaz1); 
break;
case 8:
 let arreglobloqueinterfaz2 = []; arreglobloqueinterfaz2.push($$[$0-2]); arreglobloqueinterfaz2.push($$[$0-1]); arreglobloqueinterfaz2.push($$[$0]); this.$ = new ast("bloqueinterfaz",arreglobloqueinterfaz2); 
break;
case 9:
 let arreglolista_instrucciones_interfaz = []; arreglolista_instrucciones_interfaz.push($$[$0-1]); arreglolista_instrucciones_interfaz.push($$[$0]); this.$ = new ast("lista_instrucciones_interfaz", arreglolista_instrucciones_interfaz); 
break;
case 10:
 this.$ = new ast("lista_instrucciones_interfaz",new Array($$[$0]));  
break;
case 11:
 let arregloinstrucciones_interfaz= []; arregloinstrucciones_interfaz.push($$[$0-4]); arregloinstrucciones_interfaz.push($$[$0-3]); arregloinstrucciones_interfaz.push($$[$0-2]); arregloinstrucciones_interfaz.push($$[$0-1]); arregloinstrucciones_interfaz.push($$[$0]); this.$ = new ast("instrucciones_interfaz", arregloinstrucciones_interfaz); 
break;
case 12:
 let arreglobloqueclase_interfaz1 = []; arreglobloqueclase_interfaz1.push($$[$0-1]); arreglobloqueclase_interfaz1.push($$[$0]); this.$ = new ast("bloqueclase_interfaz",arreglobloqueclase_interfaz1); 
break;
case 13:
 let arreglobloqueclase_interfaz2 = []; arreglobloqueclase_interfaz2.push($$[$0-2]); arreglobloqueclase_interfaz2.push($$[$0-1]); arreglobloqueclase_interfaz2.push($$[$0]); this.$ = new ast("bloqueclase_interfaz",arreglobloqueclase_interfaz2); 
break;
case 14: case 15:
 this.$ = new ast("tipo_clase",new Array($$[$0]));  
break;
case 16:
 let arreglolista_instruccionesclase = []; arreglolista_instruccionesclase.push($$[$0-1]); arreglolista_instruccionesclase.push($$[$0]); this.$ = new ast("lista_instrucciones_clase", arreglolista_instruccionesclase); 
break;
case 17:
 this.$ = new ast("lista_instrucciones_clase",new Array($$[$0]));  
break;
case 18:
 let arregloinstrucciones_clase = []; arregloinstrucciones_clase.push($$[$0-1]); arregloinstrucciones_clase.push($$[$0]); this.$ = new ast("instrucciones_clase", arregloinstrucciones_clase); 
break;
case 19:
 this.$ = new ast("instrucciones_clase",new Array($$[$0]));  
break;
case 20:
 console.error('Este es un error instrucciones_clase sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
                        errores_sintacticos.push(new crearErrorS("Error sintactico "+ yytext + " en instrucciones_clase ", this._$.first_line, this._$.first_column));
                    
break;
case 21:
 let arreglometodo_funcion= []; arreglometodo_funcion.push($$[$0-4]); arreglometodo_funcion.push($$[$0-3]); arreglometodo_funcion.push($$[$0-2]); arreglometodo_funcion.push($$[$0-1]); arreglometodo_funcion.push($$[$0]); this.$ = new ast("metodo_funcion", arreglometodo_funcion); 
break;
case 22:
 let arreglometodo_funcion2= []; arreglometodo_funcion2.push($$[$0-10]); arreglometodo_funcion2.push($$[$0-9]); arreglometodo_funcion2.push($$[$0-8]); arreglometodo_funcion2.push($$[$0-7]); arreglometodo_funcion2.push($$[$0-6]); arreglometodo_funcion2.push($$[$0-5]); arreglometodo_funcion2.push($$[$0-4]); arreglometodo_funcion2.push($$[$0-3]); arreglometodo_funcion2.push($$[$0-2]); arreglometodo_funcion2.push($$[$0-1]); arreglometodo_funcion2.push($$[$0]); this.$ = new ast("metodo_funcion", arreglometodo_funcion2); 
break;
case 23:
 let arreglobloqueparametros1 = []; arreglobloqueparametros1.push($$[$0-1]); arreglobloqueparametros1.push($$[$0]); this.$ = new ast("bloqueparametros", arreglobloqueparametros1); 
break;
case 24:
 let arreglobloqueparametros2 = []; arreglobloqueparametros2.push($$[$0-2]); arreglobloqueparametros2.push($$[$0-1]); arreglobloqueparametros2.push($$[$0]); this.$ = new ast("bloqueparametros", arreglobloqueparametros2); 
break;
case 25:
 let arreglobloquemetodo_funcion1 = []; arreglobloquemetodo_funcion1.push($$[$0-1]); arreglobloquemetodo_funcion1.push($$[$0]); this.$ = new ast("bloquemetodo_funcion",arreglobloquemetodo_funcion1); 
break;
case 26:
 let arreglobloquemetodo_funcion2 = []; arreglobloquemetodo_funcion2.push($$[$0-2]); arreglobloquemetodo_funcion2.push($$[$0-1]); arreglobloquemetodo_funcion2.push($$[$0]); this.$ = new ast("bloquemetodo_funcion",arreglobloquemetodo_funcion2); 
break;
case 27:
 let arreglolista_instrucciones = []; arreglolista_instrucciones.push($$[$0-1]); arreglolista_instrucciones.push($$[$0]); this.$ = new ast("lista_instrucciones", arreglolista_instrucciones); 
break;
case 28:
 this.$ = new ast("lista_instrucciones",new Array($$[$0])); 
break;
case 29:
 let arregloinstrucciones1 = []; arregloinstrucciones1.push($$[$0-1]); arregloinstrucciones1.push($$[$0]); this.$ = new ast("instrucciones", arregloinstrucciones1); 
break;
case 30:
 let arregloinstrucciones2 = []; arregloinstrucciones2.push($$[$0-1]); arregloinstrucciones2.push($$[$0]); this.$ = new ast("instrucciones", arregloinstrucciones2); 
break;
case 31: case 32: case 33: case 34: case 35:
 this.$ = new ast("instrucciones",new Array($$[$0])); 
break;
case 36:
 let arregloinstrucciones3 = []; arregloinstrucciones3.push($$[$0-1]); arregloinstrucciones3.push($$[$0]); this.$ = new ast("instrucciones", arregloinstrucciones3); 
break;
case 37: case 38:
 this.$ = new ast("sentencia_continuebreak",new Array($$[$0])); 
break;
case 39:
 let arreglosentencia_return = []; arreglosentencia_return.push($$[$0-2]); arreglosentencia_return.push($$[$0-1]); arreglosentencia_return.push($$[$0]); this.$ = new ast("sentencia_return", arreglosentencia_return); 
break;
case 40:
 let arreglosentencia_do = []; arreglosentencia_do.push($$[$0-6]); arreglosentencia_do.push($$[$0-5]); arreglosentencia_do.push($$[$0-4]); arreglosentencia_do.push($$[$0-3]); arreglosentencia_do.push($$[$0-2]); arreglosentencia_do.push($$[$0-1]); arreglosentencia_do.push($$[$0]); this.$ = new ast("sentencia_do", arreglosentencia_do); 
break;
case 41:
 let arreglosentencia_while = []; arreglosentencia_while.push($$[$0-4]); arreglosentencia_while.push($$[$0-3]); arreglosentencia_while.push($$[$0-2]); arreglosentencia_while.push($$[$0-1]); arreglosentencia_while.push($$[$0]); this.$ = new ast("sentencia_while", arreglosentencia_while); 
break;
case 42:
 let arreglosentencia_for = []; arreglosentencia_for.push($$[$0-8]); arreglosentencia_for.push($$[$0-7]); arreglosentencia_for.push($$[$0-6]); arreglosentencia_for.push($$[$0-5]); arreglosentencia_for.push($$[$0-4]); arreglosentencia_for.push($$[$0-3]); arreglosentencia_for.push($$[$0-2]); arreglosentencia_for.push($$[$0-1]); arreglosentencia_for.push($$[$0]); this.$ = new ast("sentencia_for", arreglosentencia_for); 
break;
case 43:
 let arreglosentencia_if1 = []; arreglosentencia_if1.push($$[$0-2]); arreglosentencia_if1.push($$[$0-1]); arreglosentencia_if1.push($$[$0]); this.$ = new ast("sentencia_if", arreglosentencia_if1);
break;
case 44:
 this.$ = new ast("sentencia_if",new Array($$[$0])); 
break;
case 45:
 let arreglolista_condicionesIf1 = []; arreglolista_condicionesIf1.push($$[$0-6]); arreglolista_condicionesIf1.push($$[$0-5]); arreglolista_condicionesIf1.push($$[$0-4]); arreglolista_condicionesIf1.push($$[$0-3]); arreglolista_condicionesIf1.push($$[$0-2]); arreglolista_condicionesIf1.push($$[$0-1]); arreglolista_condicionesIf1.push($$[$0]); this.$ = new ast("lista_condicionesIf", arreglolista_condicionesIf1);
break;
case 46:
 let arreglolista_condicionesIf2 = []; arreglolista_condicionesIf2.push($$[$0-4]); arreglolista_condicionesIf2.push($$[$0-3]); arreglolista_condicionesIf2.push($$[$0-2]); arreglolista_condicionesIf2.push($$[$0-1]); arreglolista_condicionesIf2.push($$[$0]); this.$ = new ast("lista_condicionesIf", arreglolista_condicionesIf2);
break;
case 47:
 let arreglobloque1 = []; arreglobloque1.push($$[$0-1]); arreglobloque1.push($$[$0]);  this.$ = new ast("bloque", arreglobloque1);
break;
case 48:
 let arreglobloque2 = []; arreglobloque2.push($$[$0-2]); arreglobloque2.push($$[$0-1]); arreglobloque2.push($$[$0]); this.$ = new ast("bloque", arreglobloque2);
break;
case 49:
 let arregloimprimir = []; arregloimprimir.push($$[$0-7]); arregloimprimir.push($$[$0-6]); arregloimprimir.push($$[$0-5]); arregloimprimir.push($$[$0-4]); arregloimprimir.push($$[$0-3]); arregloimprimir.push($$[$0-2]); arregloimprimir.push($$[$0-1]); arregloimprimir.push($$[$0]); this.$ = new ast("imprimir", arregloimprimir); 
break;
case 50: case 51:
 this.$ = new ast("tipo_imprimir",new Array($$[$0])); 
break;
case 52: case 53:
 this.$ = new ast("asignacion_for",new Array($$[$0])); 
break;
case 54:
 let arregloasignacion1 = []; arregloasignacion1.push($$[$0-2]); arregloasignacion1.push($$[$0-1]); arregloasignacion1.push($$[$0]); this.$ = new ast("asignacion", arregloasignacion1);  
break;
case 55:
 let arregloasignacion2 = []; arregloasignacion2.push($$[$0-1]); arregloasignacion2.push($$[$0]); this.$ = new ast("asignacion", arregloasignacion2);  
break;
case 56:
 let arregloasignacion3 = []; arregloasignacion3.push($$[$0-1]); arregloasignacion3.push($$[$0]); this.$ = new ast("asignacion", arregloasignacion3);  
break;
case 57:
 let arreglolista_parametros = []; arreglolista_parametros.push($$[$0-2]); arreglolista_parametros.push($$[$0-1]); arreglolista_parametros.push($$[$0]);  this.$ = new ast("lista_parametros", arreglolista_parametros); 
break;
case 58:
 this.$ = new ast("lista_parametros",new Array($$[$0])); 
break;
case 59:
 let arregloparametro = []; arregloparametro.push($$[$0-1]); arregloparametro.push($$[$0]); this.$ = new ast("parametro", arregloparametro); 
break;
case 60: case 61:
 this.$ = new ast("tipo_funcion",new Array($$[$0])); 
break;
case 62:
 let arreglodeclaracion = []; arreglodeclaracion.push($$[$0-1]); arreglodeclaracion.push($$[$0]); this.$ = new ast("declaracion", arreglodeclaracion); 
break;
case 63: case 64: case 65: case 66: case 67:
 this.$ = new ast("tipo_variable",new Array($$[$0])); 
break;
case 68:
 let arreglolista_declaraciones = []; arreglolista_declaraciones.push($$[$0-2]); arreglolista_declaraciones.push($$[$0-1]); arreglolista_declaraciones.push($$[$0]); this.$ = new ast("lista_declaraciones", arreglolista_declaraciones); 
break;
case 69:
 this.$ = new ast("lista_declaraciones",new Array($$[$0])); 
break;
case 70:
 let arreglodeclaraciones = []; arreglodeclaraciones.push($$[$0-2]); arreglodeclaraciones.push($$[$0-1]); arreglodeclaraciones.push($$[$0]); this.$ = new ast("declaraciones", arreglodeclaraciones); 
break;
case 71:
 this.$ = new ast("declaraciones",new Array($$[$0])); 
break;
case 72:
 console.error('Este es un error declaraciones sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
                    errores_sintacticos.push(new crearErrorS("Error sintactico "+ yytext + " en declaraciones ", this._$.first_line, this._$.first_column));
    
break;
case 73: case 74:
 this.$ = new ast("expresion",new Array($$[$0])); 
break;
case 75:
 console.error('Este es un error expresion sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
                        errores_sintacticos.push(new crearErrorS("Error sintactico "+ yytext + " en expresion ", this._$.first_line, this._$.first_column));
    
break;
case 76:
 let arregloexpresion_numerica1 = []; arregloexpresion_numerica1.push($$[$0-1]); arregloexpresion_numerica1.push($$[$0]); this.$ = new ast("expresion_numerica", arregloexpresion_numerica1);  
break;
case 77:
 let arregloexpresion_numerica2 = []; arregloexpresion_numerica2.push($$[$0-2]); arregloexpresion_numerica2.push($$[$0-1]); arregloexpresion_numerica2.push($$[$0]); this.$ = new ast("expresion_numerica", arregloexpresion_numerica2);  
break;
case 78: case 79: case 87: case 88:
 this.$ = new ast("expresion_numerica",new Array($$[$0])); 
break;
case 80:
 let arregloexpresion_numerica3 = []; arregloexpresion_numerica3.push($$[$0-2]); arregloexpresion_numerica3.push($$[$0-1]); arregloexpresion_numerica3.push($$[$0]); this.$ = new ast("expresion_numerica", arregloexpresion_numerica3);
break;
case 81:
 let arregloexpresion_numerica4 = []; arregloexpresion_numerica4.push($$[$0-2]); arregloexpresion_numerica4.push($$[$0-1]); arregloexpresion_numerica4.push($$[$0]); this.$ = new ast("expresion_numerica", arregloexpresion_numerica4);
break;
case 82:
 let arregloexpresion_numerica5 = []; arregloexpresion_numerica5.push($$[$0-2]); arregloexpresion_numerica5.push($$[$0-1]); arregloexpresion_numerica5.push($$[$0]); this.$ = new ast("expresion_numerica", arregloexpresion_numerica5);
break;
case 83:
 let arregloexpresion_numerica6 = []; arregloexpresion_numerica6.push($$[$0-2]); arregloexpresion_numerica6.push($$[$0-1]); arregloexpresion_numerica6.push($$[$0]); this.$ = new ast("expresion_numerica", arregloexpresion_numerica6);
break;
case 84:
 console.log("que onda");let arregloexpresion_numerica13 = []; arregloexpresion_numerica13.push($$[$0-1]); arregloexpresion_numerica13.push($$[$0]);  this.$ = new ast("expresion_numerica", arregloexpresion_numerica13);
break;
case 85:
 let arregloexpresion_numerica14 = []; arregloexpresion_numerica14.push($$[$0-1]); arregloexpresion_numerica14.push($$[$0]);  this.$ = new ast("expresion_numerica", arregloexpresion_numerica14);
break;
case 86:
  this.$ = new ast("expresion_numerica",new Array($$[$0])); 
break;
case 89:
 let arregloexpresion_numerica8 = []; arregloexpresion_numerica8.push($$[$0-2]); arregloexpresion_numerica8.push($$[$0-1]); arregloexpresion_numerica8.push($$[$0]); this.$ = new ast("expresion_relacional", arregloexpresion_numerica8);
break;
case 90:
 let arregloexpresion_numerica9 = []; arregloexpresion_numerica9.push($$[$0-2]); arregloexpresion_numerica9.push($$[$0-1]); arregloexpresion_numerica9.push($$[$0]); this.$ = new ast("expresion_relacional", arregloexpresion_numerica9);
break;
case 91:
 let arregloexpresion_numerica10 = []; arregloexpresion_numerica10.push($$[$0-2]); arregloexpresion_numerica10.push($$[$0-1]); arregloexpresion_numerica10.push($$[$0]); this.$ = new ast("expresion_relacional", arregloexpresion_numerica10);
break;
case 92:
 let arregloexpresion_numerica11 = []; arregloexpresion_numerica11.push($$[$0-2]); arregloexpresion_numerica11.push($$[$0-1]); arregloexpresion_numerica11.push($$[$0]); this.$ = new ast("expresion_relacional", arregloexpresion_numerica11);
break;
case 93:
 let arregloexpresion_numerica7 = []; arregloexpresion_numerica7.push($$[$0-2]); arregloexpresion_numerica7.push($$[$0-1]); arregloexpresion_numerica7.push($$[$0]); this.$ = new ast("expresion_relacional", arregloexpresion_numerica7);
break;
case 94:
 let arregloexpresion_numerica12 = []; arregloexpresion_numerica12.push($$[$0-2]); arregloexpresion_numerica12.push($$[$0-1]); arregloexpresion_numerica12.push($$[$0]); this.$ = new ast("expresion_relacional", arregloexpresion_numerica12);
break;
case 95: case 96:
 this.$ = new ast("expresion_relacional",new Array($$[$0])); 
break;
case 97:
 let arregloexpresion_logica4 = []; arregloexpresion_logica4.push($$[$0-1]); arregloexpresion_logica4.push($$[$0]); this.$ = new ast("expresion_logica", arregloexpresion_logica4);
break;
case 98:
 let arregloexpresion_logica5 = []; arregloexpresion_logica5.push($$[$0-2]); arregloexpresion_logica5.push($$[$0-1]); arregloexpresion_logica5.push($$[$0]); this.$ = new ast("expresion_logica", arregloexpresion_logica5);
break;
case 99:
 let arregloexpresion_logica1 = []; arregloexpresion_logica1.push($$[$0-2]); arregloexpresion_logica1.push($$[$0-1]); arregloexpresion_logica1.push($$[$0]); this.$ = new ast("expresion_logica", arregloexpresion_logica1);
break;
case 100:
 let arregloexpresion_logica2 = []; arregloexpresion_logica2.push($$[$0-2]); arregloexpresion_logica2.push($$[$0-1]); arregloexpresion_logica2.push($$[$0]); this.$ = new ast("expresion_logica", arregloexpresion_logica2);
break;
case 101:
 let arregloexpresion_logica3 = []; arregloexpresion_logica3.push($$[$0-2]); arregloexpresion_logica3.push($$[$0-1]); arregloexpresion_logica3.push($$[$0]); this.$ = new ast("expresion_logica", arregloexpresion_logica3);
break;
case 102:
 this.$ = new ast("expresion_logica",new Array($$[$0])); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:$V1},{1:[3]},{2:$V0,5:[1,6],6:7,7:$V1},o($V2,[2,3]),{8:[1,8],11:[1,9]},{13:[1,10]},{1:[2,1]},o($V2,[2,2]),{9:[1,11]},{9:[1,12]},o($V2,[2,6]),{10:13,14:[1,14]},{12:15,14:[1,16]},o($V2,[2,4]),{2:$V3,7:$V4,15:[1,17],20:18,22:19,23:20,24:21,30:$V5,69:23,71:$V6,72:$V7,73:$V8,74:$V9},o($V2,[2,5]),{7:$Va,15:[1,30],16:31,17:32},o($V2,[2,12]),{2:$V3,7:$V4,15:[1,34],22:35,23:20,24:21,30:$V5,69:23,71:$V6,72:$V7,73:$V8,74:$V9},o($Vb,[2,17]),{13:[1,36]},o($Vb,[2,19]),{13:[1,37]},{2:$Vc,9:$Vd,70:38,75:39},{18:42,26:[1,43],27:$Ve,30:$V5,69:45,71:$V6,72:$V7,73:$V8,74:$V9},o($Vf,[2,63]),o($Vf,[2,64]),o($Vf,[2,65]),o($Vf,[2,66]),o($Vf,[2,67]),o($V2,[2,7]),{7:$Va,15:[1,46],17:47},o($Vg,[2,10]),{18:48,27:$Ve,30:$V5,69:45,71:$V6,72:$V7,73:$V8,74:$V9},o($V2,[2,13]),o($Vb,[2,16]),o($Vb,[2,18]),o($Vb,[2,20]),{13:[2,62],67:[1,49]},o($Vh,[2,69]),o($Vh,[2,71],{64:[1,50]}),{13:[1,51]},{9:[1,52]},{27:[1,53]},{9:[2,60]},{9:[2,61]},o($V2,[2,8]),o($Vg,$Vf),{9:[1,54]},{2:$Vc,9:$Vd,75:55},{2:$Vi,9:$Vj,29:$Vk,48:56,53:58,76:57,77:$Vl,78:$Vm,79:$Vn,83:$Vo,84:$Vp,85:68,92:$Vq,93:$Vr,94:$Vs},o($Vh,[2,72]),{19:71,29:$Vt},{28:[1,73]},{19:74,29:$Vt},o($Vh,[2,68]),o($Vh,[2,70]),o($Vu,[2,73],{77:$Vv,80:$Vw,81:$Vx,82:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE}),o($Vu,[2,74]),{13:[1,85]},{9:$Vj,29:$VF,76:86,77:$Vl,78:$Vm,79:$Vn,83:$Vo,84:$Vp},{9:$Vj,29:$Vk,53:89,76:88,77:$Vl,78:$Vm,79:$Vn,83:$Vo,84:$Vp,85:68,92:$Vq,93:$Vr,94:$Vs},o($VG,[2,78]),o($VG,[2,79]),o($VG,[2,86],{65:[1,90],66:[1,91]}),o($VG,[2,87]),o($VG,[2,88]),{9:$Vj,29:$Vk,53:92,76:93,77:$Vl,78:$Vm,79:$Vn,83:$Vo,84:$Vp,85:68,92:$Vq,93:$Vr,94:$Vs},o($Vu,[2,102],{95:[1,94],96:[1,95],97:[1,96]}),o($VH,[2,95]),o($VH,[2,96]),{14:$VI,25:97},{30:$V5,33:[1,99],34:100,68:101,69:102,71:$V6,72:$V7,73:$V8,74:$V9},{29:[1,103]},{13:[1,104]},{9:$Vj,29:$VF,76:105,77:$Vl,78:$Vm,79:$Vn,83:$Vo,84:$Vp},{9:$Vj,29:$VF,76:106,77:$Vl,78:$Vm,79:$Vn,83:$Vo,84:$Vp},{9:$Vj,29:$VF,76:107,77:$Vl,78:$Vm,79:$Vn,83:$Vo,84:$Vp},{9:$Vj,29:$VF,76:108,77:$Vl,78:$Vm,79:$Vn,83:$Vo,84:$Vp},{9:$Vj,29:$VF,76:109,77:$Vl,78:$Vm,79:$Vn,83:$Vo,84:$Vp},{9:$Vj,29:$VF,76:110,77:$Vl,78:$Vm,79:$Vn,83:$Vo,84:$Vp},{9:$Vj,29:$VF,76:111,77:$Vl,78:$Vm,79:$Vn,83:$Vo,84:$Vp},{9:$Vj,29:$VF,76:112,77:$Vl,78:$Vm,79:$Vn,83:$Vo,84:$Vp},{9:$Vj,29:$VF,76:113,77:$Vl,78:$Vm,79:$Vn,83:$Vo,84:$Vp},{9:$Vj,29:$VF,76:114,77:$Vl,78:$Vm,79:$Vn,83:$Vo,84:$Vp},o($Vu,[2,75]),o($VG,[2,76]),{9:$Vj,29:$VF,76:115,77:$Vl,78:$Vm,79:$Vn,83:$Vo,84:$Vp},{33:$VJ,77:$Vv,80:$Vw,81:$Vx,82:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE},{33:[1,117]},o($VG,[2,84]),o($VG,[2,85]),o($Vu,[2,97]),{77:$Vv,80:$Vw,81:$Vx,82:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE},{9:$Vj,29:$Vk,53:118,76:93,77:$Vl,78:$Vm,79:$Vn,83:$Vo,84:$Vp,85:68,92:$Vq,93:$Vr,94:$Vs},{9:$Vj,29:$Vk,53:119,76:93,77:$Vl,78:$Vm,79:$Vn,83:$Vo,84:$Vp,85:68,92:$Vq,93:$Vr,94:$Vs},{9:$Vj,29:$Vk,53:120,76:93,77:$Vl,78:$Vm,79:$Vn,83:$Vo,84:$Vp,85:68,92:$Vq,93:$Vr,94:$Vs},o($Vb,[2,21]),{9:$VK,15:[1,121],23:133,30:$V5,35:122,36:123,37:124,38:125,39:126,40:127,41:128,42:129,43:130,44:131,45:$VL,46:$VM,47:$VN,49:$VO,51:$VP,52:$VQ,54:132,55:135,57:$VR,58:$VS,69:23,71:$V6,72:$V7,73:$V8,74:$V9},o($VT,[2,23]),{33:[1,144],67:[1,145]},o($VU,[2,58]),{9:[1,146]},{30:[1,147]},o($Vg,[2,11]),o($VV,[2,80],{81:$Vx,82:$Vy}),o($VV,[2,81],{81:$Vx,82:$Vy}),o($VG,[2,82]),o($VG,[2,83]),o($VH,[2,89],{77:$Vv,80:$Vw,81:$Vx,82:$Vy}),o($VH,[2,90],{77:$Vv,80:$Vw,81:$Vx,82:$Vy}),o($VH,[2,91],{77:$Vv,80:$Vw,81:$Vx,82:$Vy}),o($VH,[2,92],{77:$Vv,80:$Vw,81:$Vx,82:$Vy}),o($VH,[2,93],{77:$Vv,80:$Vw,81:$Vx,82:$Vy}),o($VH,[2,94],{77:$Vv,80:$Vw,81:$Vx,82:$Vy}),{33:$VJ,77:$Vv,80:$Vw,81:$Vx,82:$Vy},o($VG,[2,77]),o($Vu,[2,98]),o($Vu,[2,99]),o($Vu,[2,100]),o($Vu,[2,101]),o($Vb,[2,25]),{9:$VK,15:[1,148],23:133,30:$V5,36:149,37:124,38:125,39:126,40:127,41:128,42:129,43:130,44:131,45:$VL,46:$VM,47:$VN,49:$VO,51:$VP,52:$VQ,54:132,55:135,57:$VR,58:$VS,69:23,71:$V6,72:$V7,73:$V8,74:$V9},o($VW,[2,28]),{13:[1,150]},{13:[1,151]},o($VW,[2,31]),o($VW,[2,32]),o($VW,[2,33]),o($VW,[2,34]),o($VW,[2,35]),{13:[1,152]},{13:[2,52]},{13:[2,53]},{59:[1,153]},o($VW,[2,44],{56:[1,154]}),{29:[1,155]},{29:[1,156]},{14:$VX,50:157},{2:$Vi,9:$Vj,29:$Vk,48:159,53:58,76:57,77:$Vl,78:$Vm,79:$Vn,83:$Vo,84:$Vp,85:68,92:$Vq,93:$Vr,94:$Vs},{13:[2,37]},{13:[2,38]},{64:[1,160],65:[1,161],66:[1,162]},{29:[1,163]},o($VT,[2,24]),{30:$V5,68:164,69:102,71:$V6,72:$V7,73:$V8,74:$V9},o($VU,[2,59]),{31:[1,165]},o($Vb,[2,26]),o($VW,[2,27]),o($VW,[2,29]),o($VW,[2,30]),o($VW,[2,36]),{60:[1,166]},{14:$VX,50:167,57:[1,168]},{9:$VK,23:133,30:$V5,37:169,54:132,69:23,71:$V6,72:$V7,73:$V8,74:$V9},{2:$Vi,9:$Vj,29:$Vk,48:170,53:58,76:57,77:$Vl,78:$Vm,79:$Vn,83:$Vo,84:$Vp,85:68,92:$Vq,93:$Vr,94:$Vs},{51:[1,171]},{9:$VK,15:[1,172],23:133,30:$V5,35:173,36:123,37:124,38:125,39:126,40:127,41:128,42:129,43:130,44:131,45:$VL,46:$VM,47:$VN,49:$VO,51:$VP,52:$VQ,54:132,55:135,57:$VR,58:$VS,69:23,71:$V6,72:$V7,73:$V8,74:$V9},{13:[1,174]},{2:$Vi,9:$Vj,29:$Vk,48:175,53:58,76:57,77:$Vl,78:$Vm,79:$Vn,83:$Vo,84:$Vp,85:68,92:$Vq,93:$Vr,94:$Vs},o($VY,[2,55]),o($VY,[2,56]),{2:$Vi,9:$Vj,29:$Vk,48:176,53:58,76:57,77:$Vl,78:$Vm,79:$Vn,83:$Vo,84:$Vp,85:68,92:$Vq,93:$Vr,94:$Vs},o($VU,[2,57]),{32:[1,177]},{59:[1,178]},o($VW,[2,43]),{29:[1,179]},{13:[1,180]},{33:[1,181]},{29:[1,182]},o($VZ,[2,47]),{9:$VK,15:[1,183],23:133,30:$V5,36:149,37:124,38:125,39:126,40:127,41:128,42:129,43:130,44:131,45:$VL,46:$VM,47:$VN,49:$VO,51:$VP,52:$VQ,54:132,55:135,57:$VR,58:$VS,69:23,71:$V6,72:$V7,73:$V8,74:$V9},o($VW,[2,39]),o($VY,[2,54]),{33:[1,184]},{9:[1,185]},{61:186,62:[1,187],63:[1,188]},{2:$Vi,9:$Vj,29:$Vk,48:189,53:58,76:57,77:$Vl,78:$Vm,79:$Vn,83:$Vo,84:$Vp,85:68,92:$Vq,93:$Vr,94:$Vs},{9:$Vj,29:$Vk,53:190,76:93,77:$Vl,78:$Vm,79:$Vn,83:$Vo,84:$Vp,85:68,92:$Vq,93:$Vr,94:$Vs},{14:$VX,50:191},{2:$Vi,9:$Vj,29:$Vk,48:192,53:58,76:57,77:$Vl,78:$Vm,79:$Vn,83:$Vo,84:$Vp,85:68,92:$Vq,93:$Vr,94:$Vs},o($VZ,[2,48]),{14:$VX,50:193},{33:[1,194]},{29:[1,195]},{29:[2,50]},{29:[2,51]},{33:[1,196]},{13:[1,197]},o($VW,[2,41]),{33:[1,198]},o($VZ,[2,46]),{14:$VI,25:199},{2:$Vi,9:$Vj,29:$Vk,48:200,53:58,76:57,77:$Vl,78:$Vm,79:$Vn,83:$Vo,84:$Vp,85:68,92:$Vq,93:$Vr,94:$Vs},{14:$VX,50:201},{9:$VK,54:202},{13:[1,203]},o($Vb,[2,22]),{33:[1,204]},o($VZ,[2,45]),{33:[1,205]},o($VW,[2,40]),{13:[2,49]},{14:$VX,50:206},o($VW,[2,42])],
defaultActions: {6:[2,1],44:[2,60],45:[2,61],132:[2,52],133:[2,53],140:[2,37],141:[2,38],187:[2,50],188:[2,51],204:[2,49]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	var errores_lexicos		= [];
	var errores_sintacticos 	= [];
    var listaTokens           = [];
    var textoNuevo = "";
	function ast(padre, hijos){
         this.padre = padre;
         this.hijos = hijos;
    }
	function crearErrorL(descripcion, fila, columna){
  		this.descripcion = descripcion;
  		this.fila = fila;
  		this.columna = columna;
	}
    function crearErrorS(descripcion, fila, columna){
  		this.descripcion = descripcion;
  		this.fila = fila;
  		this.columna = columna;
	}
    function crearToken(valor, tipo, fila, columna){
        this.valor = valor;
        this.tipo = tipo;
        this.fila = fila;
        this.columna = columna;
    }
    function crearRespuesta(listaTokens, lista_lexicos, lista_sintacticos, ast){
        this.listaTokens = listaTokens;
        this.lista_lexicos = lista_lexicos;
        this.lista_sintacticos = lista_sintacticos;
        this.ast = ast;
    }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:textoNuevo = textoNuevo + yy_.yytext;
break;
case 1:textoNuevo = textoNuevo + yy_.yytext;
break;
case 2:textoNuevo = textoNuevo + yy_.yytext;
break;
case 3: listaTokens.push(new crearToken(yy_.yytext, "palabra reservada public", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 7;
break;
case 4: listaTokens.push(new crearToken(yy_.yytext, "palabra reservada class", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 8;
break;
case 5: listaTokens.push(new crearToken(yy_.yytext, "palabra reservada interface", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 11;
break;
case 6: listaTokens.push(new crearToken(yy_.yytext, "palabra reservada void", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 27;
break;
case 7: listaTokens.push(new crearToken(yy_.yytext, "palabra reservada for", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 52;
break;
case 8: listaTokens.push(new crearToken(yy_.yytext, "palabra reservada while", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 51;
break;
case 9: listaTokens.push(new crearToken(yy_.yytext, "palabra reservada System", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 58;
break;
case 10: listaTokens.push(new crearToken(yy_.yytext, "palabra reservada out", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 60;
break;
case 11: listaTokens.push(new crearToken(yy_.yytext, "palabra reservada println", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 62;
break;
case 12: listaTokens.push(new crearToken(yy_.yytext, "palabra reservada do", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 49;
break;
case 13: listaTokens.push(new crearToken(yy_.yytext, "palabra reservada true", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 92;
break;
case 14: listaTokens.push(new crearToken(yy_.yytext, "palabra reservada false", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 93;
break;
case 15: listaTokens.push(new crearToken(yy_.yytext, "palabra reservada if", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 57;
break;
case 16: listaTokens.push(new crearToken(yy_.yytext, "palabra reservada else", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 56;
break;
case 17: listaTokens.push(new crearToken(yy_.yytext, "palabra reservada break", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 46;
break;
case 18: listaTokens.push(new crearToken(yy_.yytext, "palabra reservada continue", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 45;
break;
case 19: listaTokens.push(new crearToken(yy_.yytext, "palabra reservada return", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 47;
break;
case 20: listaTokens.push(new crearToken(yy_.yytext, "palabra reservada int", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 71;
break;
case 21: listaTokens.push(new crearToken(yy_.yytext, "palabra reservada boolean", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 72;
break;
case 22: listaTokens.push(new crearToken(yy_.yytext, "palabra reservada double", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 73;
break;
case 23: listaTokens.push(new crearToken(yy_.yytext, "palabra reservada String", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 30;
break;
case 24: listaTokens.push(new crearToken(yy_.yytext, "palabra reservada char", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 74;
break;
case 25: listaTokens.push(new crearToken(yy_.yytext, "palabra reservada static", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 26;
break;
case 26: listaTokens.push(new crearToken(yy_.yytext, "palabra reservada print", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 63;
break;
case 27: listaTokens.push(new crearToken(yy_.yytext, "palabra reservada main", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 28;
break;
case 28: listaTokens.push(new crearToken(yy_.yytext, "coma", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 67;
break;
case 29: listaTokens.push(new crearToken(yy_.yytext, "punto", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 59;
break;
case 30: listaTokens.push(new crearToken(yy_.yytext, "punto y coma", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 13;
break;
case 31: listaTokens.push(new crearToken(yy_.yytext, "llave izquierda", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 14;
break;
case 32: listaTokens.push(new crearToken(yy_.yytext, "llave derecha", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 15;
break;
case 33: listaTokens.push(new crearToken(yy_.yytext, "parentesis izquierdo", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 29;
break;
case 34: listaTokens.push(new crearToken(yy_.yytext, "parentesis derecho", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 33;
break;
case 35: listaTokens.push(new crearToken(yy_.yytext, "corchete izquiedo", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 31;
break;
case 36: listaTokens.push(new crearToken(yy_.yytext, "corchete derecho", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 32;
break;
case 37: listaTokens.push(new crearToken(yy_.yytext, "and", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 95;
break;
case 38: listaTokens.push(new crearToken(yy_.yytext, "or", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 96;
break;
case 39: listaTokens.push(new crearToken(yy_.yytext, "incremento", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 65;
break;
case 40: listaTokens.push(new crearToken(yy_.yytext, "decremento", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 66;
break;
case 41: listaTokens.push(new crearToken(yy_.yytext, "mas", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 80;
break;
case 42: listaTokens.push(new crearToken(yy_.yytext, "menos", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 77;
break;
case 43: listaTokens.push(new crearToken(yy_.yytext, "por", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 81;
break;
case 44: listaTokens.push(new crearToken(yy_.yytext, "dividido", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 82;
break;
case 45: listaTokens.push(new crearToken(yy_.yytext, "menor igual", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 88;
break;
case 46: listaTokens.push(new crearToken(yy_.yytext, "mayor igual", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 89;
break;
case 47: listaTokens.push(new crearToken(yy_.yytext, "comparacion", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 90;
break;
case 48: listaTokens.push(new crearToken(yy_.yytext, "distinto", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 91;
break;
case 49: listaTokens.push(new crearToken(yy_.yytext, "menor", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 86;
break;
case 50: listaTokens.push(new crearToken(yy_.yytext, "mayor", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 87;
break;
case 51: listaTokens.push(new crearToken(yy_.yytext, "igual", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 64;
break;
case 52: listaTokens.push(new crearToken(yy_.yytext, "negacion", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 94;
break;
case 53: listaTokens.push(new crearToken(yy_.yytext, "xor", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 97;
break;
case 54: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); listaTokens.push(new crearToken(yy_.yytext, "cadena", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 83; 
break;
case 55: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); listaTokens.push(new crearToken(yy_.yytext, "caracter", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 84; 
break;
case 56: listaTokens.push(new crearToken(yy_.yytext, "decimal", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 79;
break;
case 57: listaTokens.push(new crearToken(yy_.yytext, "entero", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 78;
break;
case 58: listaTokens.push(new crearToken(yy_.yytext, "identificador", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 9;
break;
case 59:return 5;
break;
case 60: console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
						errores_lexicos.push(new crearErrorL("El caracter "+ yy_.yytext + " no pertenece al lenguaje.", yy_.yylloc.first_line, yy_.yylloc.first_column));
					
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:public\b)/,/^(?:class\b)/,/^(?:interface\b)/,/^(?:void\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:System\b)/,/^(?:out\b)/,/^(?:println\b)/,/^(?:do\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:int\b)/,/^(?:boolean\b)/,/^(?:double\b)/,/^(?:String\b)/,/^(?:char\b)/,/^(?:static\b)/,/^(?:print\b)/,/^(?:main\b)/,/^(?:,)/,/^(?:\.)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:!)/,/^(?:\^)/,/^(?:"[^\"]*")/,/^(?:'[^\']')/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[0-9]+\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}