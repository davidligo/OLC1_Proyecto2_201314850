/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,4],$V2=[2,5,7],$V3=[2,9],$V4=[1,20],$V5=[1,22],$V6=[1,23],$V7=[1,24],$V8=[1,25],$V9=[1,26],$Va=[1,27],$Vb=[2,7,13,60,61,62,63,64],$Vc=[1,35],$Vd=[1,34],$Ve=[11,55],$Vf=[1,47],$Vg=[1,52],$Vh=[1,49],$Vi=[1,48],$Vj=[1,50],$Vk=[1,51],$Vl=[1,53],$Vm=[1,54],$Vn=[1,57],$Vo=[1,58],$Vp=[1,55],$Vq=[11,24,55],$Vr=[1,62],$Vs=[1,61],$Vt=[1,63],$Vu=[1,64],$Vv=[1,65],$Vw=[1,66],$Vx=[1,67],$Vy=[1,68],$Vz=[1,69],$VA=[1,70],$VB=[1,73],$VC=[11,24,55,67,70,71,72,76,77,78,79,80,81,85,86,87],$VD=[11,24,55,85,86,87],$VE=[1,100],$VF=[1,123],$VG=[1,122],$VH=[1,121],$VI=[1,120],$VJ=[1,119],$VK=[1,124],$VL=[1,117],$VM=[24,55],$VN=[11,24,55,67,70,76,77,78,79,80,81,85,86,87],$VO=[9,13,35,37,39,40,45,46,60,61,62,63,64],$VP=[1,137],$VQ=[11,24],$VR=[9,13,35,37,39,40,44,45,46,60,61,62,63,64];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"lista_clases":4,"EOF":5,"clase_interfaz":6,"RPUBLIC":7,"tipo_clase":8,"IDENTIFICADOR":9,"bloqueclase_interfaz":10,"PTCOMA":11,"LLAVIZQ":12,"LLAVDER":13,"lista_instrucciones_clase":14,"RCLASS":15,"RINTERFACE":16,"instrucciones_clase":17,"declaracion":18,"metodo_funcion":19,"tipo_funcion":20,"bloqueparametros":21,"bloquemetodo_funcion":22,"PARIZQ":23,"PARDER":24,"lista_parametros":25,"lista_instrucciones":26,"instrucciones":27,"asignacion_for":28,"imprimir":29,"sentencia_if":30,"sentencia_for":31,"sentencia_while":32,"sentencia_do":33,"sentencia_return":34,"RRETURN":35,"expresion":36,"RDO":37,"bloque":38,"RWHILE":39,"RFOR":40,"expresion_logica":41,"asignacion":42,"lista_condicionesIf":43,"RELSE":44,"RIF":45,"RSYSTEM":46,"PUNTO":47,"ROUT":48,"tipo_imprimir":49,"RPRINTLN":50,"RPRINT":51,"IGUAL":52,"MASMAS":53,"MENOSMENOS":54,"COMA":55,"parametro":56,"tipo_variable":57,"RVOID":58,"lista_declaraciones":59,"RINT":60,"RBOOLEAN":61,"RDOUBLE":62,"RSTRING":63,"RCHAR":64,"declaraciones":65,"expresion_numerica":66,"MENOS":67,"ENTERO":68,"DECIMAL":69,"MAS":70,"POR":71,"DIVIDIDO":72,"CADENA":73,"CARACTER":74,"expresion_relacional":75,"MENQUE":76,"MAYQUE":77,"MENIGQUE":78,"MAYIGQUE":79,"DOBLEIG":80,"NOIG":81,"RTRUE":82,"RFALSE":83,"NOT":84,"AND":85,"OR":86,"XOR":87,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"RPUBLIC",9:"IDENTIFICADOR",11:"PTCOMA",12:"LLAVIZQ",13:"LLAVDER",15:"RCLASS",16:"RINTERFACE",23:"PARIZQ",24:"PARDER",35:"RRETURN",37:"RDO",39:"RWHILE",40:"RFOR",44:"RELSE",45:"RIF",46:"RSYSTEM",47:"PUNTO",48:"ROUT",50:"RPRINTLN",51:"RPRINT",52:"IGUAL",53:"MASMAS",54:"MENOSMENOS",55:"COMA",58:"RVOID",60:"RINT",61:"RBOOLEAN",62:"RDOUBLE",63:"RSTRING",64:"RCHAR",67:"MENOS",68:"ENTERO",69:"DECIMAL",70:"MAS",71:"POR",72:"DIVIDIDO",73:"CADENA",74:"CARACTER",76:"MENQUE",77:"MAYQUE",78:"MENIGQUE",79:"MAYIGQUE",80:"DOBLEIG",81:"NOIG",82:"RTRUE",83:"RFALSE",84:"NOT",85:"AND",86:"OR",87:"XOR"},
productions_: [0,[3,2],[4,2],[4,1],[6,4],[6,2],[10,2],[10,3],[8,1],[8,1],[14,2],[14,1],[17,2],[17,1],[17,2],[19,5],[21,2],[21,3],[22,2],[22,3],[26,2],[26,1],[27,2],[27,2],[27,1],[27,1],[27,1],[27,1],[27,1],[34,3],[33,7],[32,5],[31,9],[30,3],[30,1],[43,7],[43,5],[38,2],[38,3],[29,8],[49,1],[49,1],[28,1],[28,1],[42,3],[42,2],[42,2],[25,3],[25,1],[56,2],[20,1],[20,1],[18,2],[57,1],[57,1],[57,1],[57,1],[57,1],[59,3],[59,1],[65,3],[65,1],[65,2],[36,1],[36,1],[36,2],[66,2],[66,3],[66,1],[66,1],[66,3],[66,3],[66,3],[66,3],[66,2],[66,2],[66,1],[66,1],[66,1],[75,3],[75,3],[75,3],[75,3],[75,3],[75,3],[75,1],[75,1],[41,2],[41,3],[41,3],[41,3],[41,3],[41,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 
        var raiz = new ast("ini",new Array($$[$0-1])); 
        //console.log(JSON.stringify(raiz));
        return new crearRespuesta(listaTokens, errores_lexicos, errores_sintacticos, raiz);
    
break;
case 2:
 let arreglo5 = []; arreglo5.push($$[$0-1]); arreglo5.push($$[$0])   ; this.$ = new ast("lista_clases",arreglo5);  ;
break;
case 3:
 this.$ = new ast("lista_clases",new Array($$[$0])); 
break;
case 4:
 let arreglo4 = []; arreglo4.push($$[$0-3]); arreglo4.push($$[$0-2]); arreglo4.push($$[$0-1]); arreglo4.push($$[$0]); this.$ = new ast("clase",arreglo4);  
break;
case 5:
 console.error('Este es un error clase_interfaz sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 6:
 let arreglobloqueclase_interfaz1 = []; arreglobloqueclase_interfaz1.push($$[$0-1]); arreglobloqueclase_interfaz1.push($$[$0]); this.$ = new ast("bloqueclase_interfaz",arreglobloqueclase_interfaz1); 
break;
case 7:
 let arreglobloqueclase_interfaz2 = []; arreglobloqueclase_interfaz2.push($$[$0-2]); arreglobloqueclase_interfaz2.push($$[$0-1]); arreglobloqueclase_interfaz2.push($$[$0]); this.$ = new ast("bloqueclase_interfaz",arreglobloqueclase_interfaz2); 
break;
case 8: case 9:
 this.$ = new ast("tipo_clase",new Array($$[$0]));  
break;
case 10:
 let arreglolista_instruccionesclase = []; arreglolista_instruccionesclase.push($$[$0-1]); arreglolista_instruccionesclase.push($$[$0]); this.$ = new ast("lista_instrucciones_clase", arreglolista_instruccionesclase); 
break;
case 11:
 this.$ = new ast("lista_instrucciones_clase",new Array($$[$0]));  
break;
case 12:
 let arregloinstrucciones_clase = []; arregloinstrucciones_clase.push($$[$0-1]); arregloinstrucciones_clase.push($$[$0]); this.$ = new ast("instrucciones_clase", arregloinstrucciones_clase); 
break;
case 13:
 this.$ = new ast("instrucciones_clase",new Array($$[$0]));  
break;
case 14:
 console.error('Este es un error instrucciones_clase sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 15:
 let arreglometodo_funcion= []; arreglometodo_funcion.push($$[$0-4]); arreglometodo_funcion.push($$[$0-3]); arreglometodo_funcion.push($$[$0-2]); arreglometodo_funcion.push($$[$0-1]); arreglometodo_funcion.push($$[$0]); this.$ = new ast("metodo_funcion", arreglometodo_funcion); 
break;
case 16:
 let arreglobloqueparametros1 = []; arreglobloqueparametros1.push($$[$0-1]); arreglobloqueparametros1.push($$[$0]); this.$ = new ast("bloqueparametros", arreglobloqueparametros1); 
break;
case 17:
 let arreglobloqueparametros2 = []; arreglobloqueparametros2.push($$[$0-2]); arreglobloqueparametros2.push($$[$0-1]); arreglobloqueparametros2.push($$[$0]); this.$ = new ast("bloqueparametros", arreglobloqueparametros2); 
break;
case 18:
 let arreglobloquemetodo_funcion1 = []; arreglobloquemetodo_funcion1.push($$[$0-1]); arreglobloquemetodo_funcion1.push($$[$0]); this.$ = new ast("bloquemetodo_funcion",arreglobloquemetodo_funcion1); 
break;
case 19:
 let arreglobloquemetodo_funcion2 = []; arreglobloquemetodo_funcion2.push($$[$0-2]); arreglobloquemetodo_funcion2.push($$[$0-1]); arreglobloquemetodo_funcion2.push($$[$0]); this.$ = new ast("bloquemetodo_funcion",arreglobloquemetodo_funcion2); 
break;
case 20:
 let arreglolista_instrucciones = []; arreglolista_instrucciones.push($$[$0-1]); arreglolista_instrucciones.push($$[$0]); this.$ = new ast("lista_instrucciones", arreglolista_instrucciones); 
break;
case 21:
 this.$ = new ast("lista_instrucciones",new Array($$[$0])); 
break;
case 22:
 let arregloinstrucciones1 = []; arregloinstrucciones1.push($$[$0-1]); arregloinstrucciones1.push($$[$0]); this.$ = new ast("instrucciones", arregloinstrucciones1); 
break;
case 23:
 let arregloinstrucciones2 = []; arregloinstrucciones2.push($$[$0-1]); arregloinstrucciones2.push($$[$0]); this.$ = new ast("instrucciones", arregloinstrucciones2); 
break;
case 24: case 25: case 26: case 27: case 28:
 this.$ = new ast("instrucciones",new Array($$[$0])); 
break;
case 29:
 let arreglosentencia_return = []; arreglosentencia_return.push($$[$0-2]); arreglosentencia_return.push($$[$0-1]); arreglosentencia_return.push($$[$0]); this.$ = new ast("sentencia_return", arreglosentencia_return); 
break;
case 30:
 let arreglosentencia_do = []; arreglosentencia_do.push($$[$0-6]); arreglosentencia_do.push($$[$0-5]); arreglosentencia_do.push($$[$0-4]); arreglosentencia_do.push($$[$0-3]); arreglosentencia_do.push($$[$0-2]); arreglosentencia_do.push($$[$0-1]); arreglosentencia_do.push($$[$0]); this.$ = new ast("sentencia_do", arreglosentencia_do); 
break;
case 31:
 let arreglosentencia_while = []; arreglosentencia_while.push($$[$0-4]); arreglosentencia_while.push($$[$0-3]); arreglosentencia_while.push($$[$0-2]); arreglosentencia_while.push($$[$0-1]); arreglosentencia_while.push($$[$0]); this.$ = new ast("sentencia_while", arreglosentencia_while); 
break;
case 32:
 let arreglosentencia_for = []; arreglosentencia_for.push($$[$0-8]); arreglosentencia_for.push($$[$0-7]); arreglosentencia_for.push($$[$0-6]); arreglosentencia_for.push($$[$0-5]); arreglosentencia_for.push($$[$0-4]); arreglosentencia_for.push($$[$0-3]); arreglosentencia_for.push($$[$0-2]); arreglosentencia_for.push($$[$0-1]); arreglosentencia_for.push($$[$0]); this.$ = new ast("sentencia_for", arreglosentencia_for); 
break;
case 33:
 let arreglosentencia_if1 = []; arreglosentencia_if1.push($$[$0-2]); arreglosentencia_if1.push($$[$0-1]); arreglosentencia_if1.push($$[$0]); this.$ = new ast("sentencia_if", arreglosentencia_if1);
break;
case 34:
 this.$ = new ast("sentencia_if",new Array($$[$0])); 
break;
case 35:
 let arreglolista_condicionesIf1 = []; arreglolista_condicionesIf1.push($$[$0-6]); arreglolista_condicionesIf1.push($$[$0-5]); arreglolista_condicionesIf1.push($$[$0-4]); arreglolista_condicionesIf1.push($$[$0-3]); arreglolista_condicionesIf1.push($$[$0-2]); arreglolista_condicionesIf1.push($$[$0-1]); arreglolista_condicionesIf1.push($$[$0]); this.$ = new ast("lista_condicionesIf", arreglolista_condicionesIf1);
break;
case 36:
 let arreglolista_condicionesIf2 = []; arreglolista_condicionesIf2.push($$[$0-4]); arreglolista_condicionesIf2.push($$[$0-3]); arreglolista_condicionesIf2.push($$[$0-2]); arreglolista_condicionesIf2.push($$[$0-1]); arreglolista_condicionesIf2.push($$[$0]); this.$ = new ast("lista_condicionesIf", arreglolista_condicionesIf2);
break;
case 37:
 let arreglobloque1 = []; arreglobloque1.push($$[$0-1]); arreglobloque1.push($$[$0]);  this.$ = new ast("bloque", arreglobloque1);
break;
case 38:
 let arreglobloque2 = []; arreglobloque2.push($$[$0-2]); arreglobloque2.push($$[$0-1]); arreglobloque2.push($$[$0]); this.$ = new ast("bloque", arreglobloque2);
break;
case 39:
 let arregloimprimir = []; arregloimprimir.push($$[$0-7]); arregloimprimir.push($$[$0-6]); arregloimprimir.push($$[$0-5]); arregloimprimir.push($$[$0-4]); arregloimprimir.push($$[$0-3]); arregloimprimir.push($$[$0-2]); arregloimprimir.push($$[$0-1]); arregloimprimir.push($$[$0]); this.$ = new ast("imprimir", arregloimprimir); 
break;
case 40: case 41:
 this.$ = new ast("tipo_imprimir",new Array($$[$0])); 
break;
case 42: case 43:
 this.$ = new ast("asignacion_for",new Array($$[$0])); 
break;
case 44:
 let arregloasignacion1 = []; arregloasignacion1.push($$[$0-2]); arregloasignacion1.push($$[$0-1]); arregloasignacion1.push($$[$0]); this.$ = new ast("asignacion", arregloasignacion1);  
break;
case 45:
 let arregloasignacion2 = []; arregloasignacion2.push($$[$0-1]); arregloasignacion2.push($$[$0]); this.$ = new ast("asignacion", arregloasignacion2);  
break;
case 46:
 let arregloasignacion3 = []; arregloasignacion3.push($$[$0-1]); arregloasignacion3.push($$[$0]); this.$ = new ast("asignacion", arregloasignacion3);  
break;
case 47:
 let arreglolista_parametros = []; arreglolista_parametros.push($$[$0-2]); arreglolista_parametros.push($$[$0-1]); arreglolista_parametros.push($$[$0]);  this.$ = new ast("lista_parametros", arreglolista_parametros); 
break;
case 48:
 this.$ = new ast("lista_parametros",new Array($$[$0])); 
break;
case 49:
 let arregloparametro = []; arregloparametro.push($$[$0-1]); arregloparametro.push($$[$0]); this.$ = new ast("parametro", arregloparametro); 
break;
case 50: case 51:
 this.$ = new ast("tipo_funcion",new Array($$[$0])); 
break;
case 52:
 let arreglodeclaracion = []; arreglodeclaracion.push($$[$0-1]); arreglodeclaracion.push($$[$0]); this.$ = new ast("declaracion", arreglodeclaracion); 
break;
case 53: case 54: case 55: case 56: case 57:
 this.$ = new ast("tipo_variable",new Array($$[$0])); 
break;
case 58:
 let arreglolista_declaraciones = []; arreglolista_declaraciones.push($$[$0-2]); arreglolista_declaraciones.push($$[$0-1]); arreglolista_declaraciones.push($$[$0]); this.$ = new ast("lista_declaraciones", arreglolista_declaraciones); 
break;
case 59:
 this.$ = new ast("lista_declaraciones",new Array($$[$0])); 
break;
case 60:
 let arreglodeclaraciones = []; arreglodeclaraciones.push($$[$0-2]); arreglodeclaraciones.push($$[$0-1]); arreglodeclaraciones.push($$[$0]); this.$ = new ast("declaraciones", arreglodeclaraciones); 
break;
case 61:
 this.$ = new ast("declaraciones",new Array($$[$0])); 
break;
case 62:
 console.error('Este es un error declaraciones sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 63: case 64:
 this.$ = new ast("expresion",new Array($$[$0])); 
break;
case 65:
 console.error('Este es un error expresion sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 66:
 let arregloexpresion_numerica1 = []; arregloexpresion_numerica1.push($$[$0-1]); arregloexpresion_numerica1.push($$[$0]); this.$ = new ast("expresion_numerica", arregloexpresion_numerica1);  
break;
case 67:
 let arregloexpresion_numerica2 = []; arregloexpresion_numerica2.push($$[$0-2]); arregloexpresion_numerica2.push($$[$0-1]); arregloexpresion_numerica2.push($$[$0]); this.$ = new ast("expresion_numerica", arregloexpresion_numerica2);  
break;
case 68: case 69: case 77: case 78:
 this.$ = new ast("expresion_numerica",new Array($$[$0])); 
break;
case 70:
 let arregloexpresion_numerica3 = []; arregloexpresion_numerica3.push($$[$0-2]); arregloexpresion_numerica3.push($$[$0-1]); arregloexpresion_numerica3.push($$[$0]); this.$ = new ast("expresion_numerica", arregloexpresion_numerica3);
break;
case 71:
 let arregloexpresion_numerica4 = []; arregloexpresion_numerica4.push($$[$0-2]); arregloexpresion_numerica4.push($$[$0-1]); arregloexpresion_numerica4.push($$[$0]); this.$ = new ast("expresion_numerica", arregloexpresion_numerica4);
break;
case 72:
 let arregloexpresion_numerica5 = []; arregloexpresion_numerica5.push($$[$0-2]); arregloexpresion_numerica5.push($$[$0-1]); arregloexpresion_numerica5.push($$[$0]); this.$ = new ast("expresion_numerica", arregloexpresion_numerica5);
break;
case 73:
 let arregloexpresion_numerica6 = []; arregloexpresion_numerica6.push($$[$0-2]); arregloexpresion_numerica6.push($$[$0-1]); arregloexpresion_numerica6.push($$[$0]); this.$ = new ast("expresion_numerica", arregloexpresion_numerica6);
break;
case 74:
 console.log("que onda");let arregloexpresion_numerica13 = []; arregloexpresion_numerica13.push($$[$0-1]); arregloexpresion_numerica13.push($$[$0]);  this.$ = new ast("expresion_numerica", arregloexpresion_numerica13);
break;
case 75:
 let arregloexpresion_numerica14 = []; arregloexpresion_numerica14.push($$[$0-1]); arregloexpresion_numerica14.push($$[$0]);  this.$ = new ast("expresion_numerica", arregloexpresion_numerica14);
break;
case 76:
  this.$ = new ast("expresion_numerica",new Array($$[$0])); 
break;
case 79:
 let arregloexpresion_numerica8 = []; arregloexpresion_numerica8.push($$[$0-2]); arregloexpresion_numerica8.push($$[$0-1]); arregloexpresion_numerica8.push($$[$0]); this.$ = new ast("expresion_relacional", arregloexpresion_numerica8);
break;
case 80:
 let arregloexpresion_numerica9 = []; arregloexpresion_numerica9.push($$[$0-2]); arregloexpresion_numerica9.push($$[$0-1]); arregloexpresion_numerica9.push($$[$0]); this.$ = new ast("expresion_relacional", arregloexpresion_numerica9);
break;
case 81:
 let arregloexpresion_numerica10 = []; arregloexpresion_numerica10.push($$[$0-2]); arregloexpresion_numerica10.push($$[$0-1]); arregloexpresion_numerica10.push($$[$0]); this.$ = new ast("expresion_relacional", arregloexpresion_numerica10);
break;
case 82:
 let arregloexpresion_numerica11 = []; arregloexpresion_numerica11.push($$[$0-2]); arregloexpresion_numerica11.push($$[$0-1]); arregloexpresion_numerica11.push($$[$0]); this.$ = new ast("expresion_relacional", arregloexpresion_numerica11);
break;
case 83:
 let arregloexpresion_numerica7 = []; arregloexpresion_numerica7.push($$[$0-2]); arregloexpresion_numerica7.push($$[$0-1]); arregloexpresion_numerica7.push($$[$0]); this.$ = new ast("expresion_relacional", arregloexpresion_numerica7);
break;
case 84:
 let arregloexpresion_numerica12 = []; arregloexpresion_numerica12.push($$[$0-2]); arregloexpresion_numerica12.push($$[$0-1]); arregloexpresion_numerica12.push($$[$0]); this.$ = new ast("expresion_relacional", arregloexpresion_numerica12);
break;
case 85: case 86:
 this.$ = new ast("expresion_relacional",new Array($$[$0])); 
break;
case 87:
 let arregloexpresion_logica4 = []; arregloexpresion_logica4.push($$[$0-1]); arregloexpresion_logica4.push($$[$0]); this.$ = new ast("expresion_logica", arregloexpresion_logica4);
break;
case 88:
 let arregloexpresion_logica5 = []; arregloexpresion_logica5.push($$[$0-2]); arregloexpresion_logica5.push($$[$0-1]); arregloexpresion_logica5.push($$[$0]); this.$ = new ast("expresion_logica", arregloexpresion_logica5);
break;
case 89:
 let arregloexpresion_logica1 = []; arregloexpresion_logica1.push($$[$0-2]); arregloexpresion_logica1.push($$[$0-1]); arregloexpresion_logica1.push($$[$0]); this.$ = new ast("expresion_logica", arregloexpresion_logica1);
break;
case 90:
 let arregloexpresion_logica2 = []; arregloexpresion_logica2.push($$[$0-2]); arregloexpresion_logica2.push($$[$0-1]); arregloexpresion_logica2.push($$[$0]); this.$ = new ast("expresion_logica", arregloexpresion_logica2);
break;
case 91:
 let arregloexpresion_logica3 = []; arregloexpresion_logica3.push($$[$0-2]); arregloexpresion_logica3.push($$[$0-1]); arregloexpresion_logica3.push($$[$0]); this.$ = new ast("expresion_logica", arregloexpresion_logica3);
break;
case 92:
 this.$ = new ast("expresion_logica",new Array($$[$0])); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:$V1},{1:[3]},{2:$V0,5:[1,6],6:7,7:$V1},o($V2,[2,3]),{8:8,15:[1,9],16:[1,10]},{11:[1,11]},{1:[2,1]},o($V2,[2,2]),{9:[1,12]},{9:[2,8]},{9:$V3},o($V2,[2,5]),{10:13,12:[1,14]},o($V2,[2,4]),{2:$V4,7:$V5,13:[1,15],14:16,17:17,18:18,19:19,57:21,60:$V6,61:$V7,62:$V8,63:$V9,64:$Va},o($V2,[2,6]),{2:$V4,7:$V5,13:[1,28],17:29,18:18,19:19,57:21,60:$V6,61:$V7,62:$V8,63:$V9,64:$Va},o($Vb,[2,11]),{11:[1,30]},o($Vb,[2,13]),{11:[1,31]},{2:$Vc,9:$Vd,59:32,65:33},{20:36,57:38,58:[1,37],60:$V6,61:$V7,62:$V8,63:$V9,64:$Va},o($V3,[2,53]),o($V3,[2,54]),o($V3,[2,55]),o($V3,[2,56]),o($V3,[2,57]),o($V2,[2,7]),o($Vb,[2,10]),o($Vb,[2,12]),o($Vb,[2,14]),{11:[2,52],55:[1,39]},o($Ve,[2,59]),o($Ve,[2,61],{52:[1,40]}),{11:[1,41]},{9:[1,42]},{9:[2,50]},{9:[2,51]},{2:$Vc,9:$Vd,65:43},{2:$Vf,9:$Vg,23:$Vh,36:44,41:46,66:45,67:$Vi,68:$Vj,69:$Vk,73:$Vl,74:$Vm,75:56,82:$Vn,83:$Vo,84:$Vp},o($Ve,[2,62]),{21:59,23:[1,60]},o($Ve,[2,58]),o($Ve,[2,60]),o($Vq,[2,63],{67:$Vr,70:$Vs,71:$Vt,72:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA}),o($Vq,[2,64]),{11:[1,71]},{9:$Vg,23:$VB,66:72,67:$Vi,68:$Vj,69:$Vk,73:$Vl,74:$Vm},{9:$Vg,23:$Vh,41:75,66:74,67:$Vi,68:$Vj,69:$Vk,73:$Vl,74:$Vm,75:56,82:$Vn,83:$Vo,84:$Vp},o($VC,[2,68]),o($VC,[2,69]),o($VC,[2,76],{53:[1,76],54:[1,77]}),o($VC,[2,77]),o($VC,[2,78]),{9:$Vg,23:$Vh,41:78,66:79,67:$Vi,68:$Vj,69:$Vk,73:$Vl,74:$Vm,75:56,82:$Vn,83:$Vo,84:$Vp},o($Vq,[2,92],{85:[1,80],86:[1,81],87:[1,82]}),o($VD,[2,85]),o($VD,[2,86]),{12:[1,84],22:83},{24:[1,85],25:86,56:87,57:88,60:$V6,61:$V7,62:$V8,63:$V9,64:$Va},{9:$Vg,23:$VB,66:89,67:$Vi,68:$Vj,69:$Vk,73:$Vl,74:$Vm},{9:$Vg,23:$VB,66:90,67:$Vi,68:$Vj,69:$Vk,73:$Vl,74:$Vm},{9:$Vg,23:$VB,66:91,67:$Vi,68:$Vj,69:$Vk,73:$Vl,74:$Vm},{9:$Vg,23:$VB,66:92,67:$Vi,68:$Vj,69:$Vk,73:$Vl,74:$Vm},{9:$Vg,23:$VB,66:93,67:$Vi,68:$Vj,69:$Vk,73:$Vl,74:$Vm},{9:$Vg,23:$VB,66:94,67:$Vi,68:$Vj,69:$Vk,73:$Vl,74:$Vm},{9:$Vg,23:$VB,66:95,67:$Vi,68:$Vj,69:$Vk,73:$Vl,74:$Vm},{9:$Vg,23:$VB,66:96,67:$Vi,68:$Vj,69:$Vk,73:$Vl,74:$Vm},{9:$Vg,23:$VB,66:97,67:$Vi,68:$Vj,69:$Vk,73:$Vl,74:$Vm},{9:$Vg,23:$VB,66:98,67:$Vi,68:$Vj,69:$Vk,73:$Vl,74:$Vm},o($Vq,[2,65]),o($VC,[2,66]),{9:$Vg,23:$VB,66:99,67:$Vi,68:$Vj,69:$Vk,73:$Vl,74:$Vm},{24:$VE,67:$Vr,70:$Vs,71:$Vt,72:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA},{24:[1,101]},o($VC,[2,74]),o($VC,[2,75]),o($Vq,[2,87]),{67:$Vr,70:$Vs,71:$Vt,72:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA},{9:$Vg,23:$Vh,41:102,66:79,67:$Vi,68:$Vj,69:$Vk,73:$Vl,74:$Vm,75:56,82:$Vn,83:$Vo,84:$Vp},{9:$Vg,23:$Vh,41:103,66:79,67:$Vi,68:$Vj,69:$Vk,73:$Vl,74:$Vm,75:56,82:$Vn,83:$Vo,84:$Vp},{9:$Vg,23:$Vh,41:104,66:79,67:$Vi,68:$Vj,69:$Vk,73:$Vl,74:$Vm,75:56,82:$Vn,83:$Vo,84:$Vp},o($Vb,[2,15]),{9:$VF,13:[1,105],18:116,26:106,27:107,28:108,29:109,30:110,31:111,32:112,33:113,34:114,35:$VG,37:$VH,39:$VI,40:$VJ,42:115,43:118,45:$VK,46:$VL,57:21,60:$V6,61:$V7,62:$V8,63:$V9,64:$Va},{12:[2,16]},{24:[1,125],55:[1,126]},o($VM,[2,48]),{9:[1,127]},o($VN,[2,70],{71:$Vt,72:$Vu}),o($VN,[2,71],{71:$Vt,72:$Vu}),o($VC,[2,72]),o($VC,[2,73]),o($VD,[2,79],{67:$Vr,70:$Vs,71:$Vt,72:$Vu}),o($VD,[2,80],{67:$Vr,70:$Vs,71:$Vt,72:$Vu}),o($VD,[2,81],{67:$Vr,70:$Vs,71:$Vt,72:$Vu}),o($VD,[2,82],{67:$Vr,70:$Vs,71:$Vt,72:$Vu}),o($VD,[2,83],{67:$Vr,70:$Vs,71:$Vt,72:$Vu}),o($VD,[2,84],{67:$Vr,70:$Vs,71:$Vt,72:$Vu}),{24:$VE,67:$Vr,70:$Vs,71:$Vt,72:$Vu},o($VC,[2,67]),o($Vq,[2,88]),o($Vq,[2,89]),o($Vq,[2,90]),o($Vq,[2,91]),o($Vb,[2,18]),{9:$VF,13:[1,128],18:116,27:129,28:108,29:109,30:110,31:111,32:112,33:113,34:114,35:$VG,37:$VH,39:$VI,40:$VJ,42:115,43:118,45:$VK,46:$VL,57:21,60:$V6,61:$V7,62:$V8,63:$V9,64:$Va},o($VO,[2,21]),{11:[1,130]},{11:[1,131]},o($VO,[2,24]),o($VO,[2,25]),o($VO,[2,26]),o($VO,[2,27]),o($VO,[2,28]),{11:[2,42]},{11:[2,43]},{47:[1,132]},o($VO,[2,34],{44:[1,133]}),{23:[1,134]},{23:[1,135]},{12:$VP,38:136},{2:$Vf,9:$Vg,23:$Vh,36:138,41:46,66:45,67:$Vi,68:$Vj,69:$Vk,73:$Vl,74:$Vm,75:56,82:$Vn,83:$Vo,84:$Vp},{52:[1,139],53:[1,140],54:[1,141]},{23:[1,142]},{12:[2,17]},{56:143,57:88,60:$V6,61:$V7,62:$V8,63:$V9,64:$Va},o($VM,[2,49]),o($Vb,[2,19]),o($VO,[2,20]),o($VO,[2,22]),o($VO,[2,23]),{48:[1,144]},{12:$VP,38:145,45:[1,146]},{9:$VF,18:116,28:147,42:115,57:21,60:$V6,61:$V7,62:$V8,63:$V9,64:$Va},{2:$Vf,9:$Vg,23:$Vh,36:148,41:46,66:45,67:$Vi,68:$Vj,69:$Vk,73:$Vl,74:$Vm,75:56,82:$Vn,83:$Vo,84:$Vp},{39:[1,149]},{9:$VF,13:[1,150],18:116,26:151,27:107,28:108,29:109,30:110,31:111,32:112,33:113,34:114,35:$VG,37:$VH,39:$VI,40:$VJ,42:115,43:118,45:$VK,46:$VL,57:21,60:$V6,61:$V7,62:$V8,63:$V9,64:$Va},{11:[1,152]},{2:$Vf,9:$Vg,23:$Vh,36:153,41:46,66:45,67:$Vi,68:$Vj,69:$Vk,73:$Vl,74:$Vm,75:56,82:$Vn,83:$Vo,84:$Vp},o($VQ,[2,45]),o($VQ,[2,46]),{2:$Vf,9:$Vg,23:$Vh,36:154,41:46,66:45,67:$Vi,68:$Vj,69:$Vk,73:$Vl,74:$Vm,75:56,82:$Vn,83:$Vo,84:$Vp},o($VM,[2,47]),{47:[1,155]},o($VO,[2,33]),{23:[1,156]},{11:[1,157]},{24:[1,158]},{23:[1,159]},o($VR,[2,37]),{9:$VF,13:[1,160],18:116,27:129,28:108,29:109,30:110,31:111,32:112,33:113,34:114,35:$VG,37:$VH,39:$VI,40:$VJ,42:115,43:118,45:$VK,46:$VL,57:21,60:$V6,61:$V7,62:$V8,63:$V9,64:$Va},o($VO,[2,29]),o($VQ,[2,44]),{24:[1,161]},{49:162,50:[1,163],51:[1,164]},{2:$Vf,9:$Vg,23:$Vh,36:165,41:46,66:45,67:$Vi,68:$Vj,69:$Vk,73:$Vl,74:$Vm,75:56,82:$Vn,83:$Vo,84:$Vp},{9:$Vg,23:$Vh,41:166,66:79,67:$Vi,68:$Vj,69:$Vk,73:$Vl,74:$Vm,75:56,82:$Vn,83:$Vo,84:$Vp},{12:$VP,38:167},{2:$Vf,9:$Vg,23:$Vh,36:168,41:46,66:45,67:$Vi,68:$Vj,69:$Vk,73:$Vl,74:$Vm,75:56,82:$Vn,83:$Vo,84:$Vp},o($VR,[2,38]),{12:$VP,38:169},{23:[1,170]},{23:[2,40]},{23:[2,41]},{24:[1,171]},{11:[1,172]},o($VO,[2,31]),{24:[1,173]},o($VR,[2,36]),{2:$Vf,9:$Vg,23:$Vh,36:174,41:46,66:45,67:$Vi,68:$Vj,69:$Vk,73:$Vl,74:$Vm,75:56,82:$Vn,83:$Vo,84:$Vp},{12:$VP,38:175},{9:$VF,42:176},{11:[1,177]},{24:[1,178]},o($VR,[2,35]),{24:[1,179]},o($VO,[2,30]),{11:[2,39]},{12:$VP,38:180},o($VO,[2,32])],
defaultActions: {6:[2,1],9:[2,8],10:[2,9],37:[2,50],38:[2,51],85:[2,16],115:[2,42],116:[2,43],125:[2,17],163:[2,40],164:[2,41],178:[2,39]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const errores_lexicos		= [];
	const errores_sintacticos 	= [];
    const listaTokens           = [];
	function ast(padre, hijos){
         this.padre = padre;
         this.hijos = hijos;
    }
	function crearErrorL(descripcion, fila, columna){
  		this.descripcion = descripcion;
  		this.fila = fila;
  		this.columna = columna;
	}
    function crearToken(valor, tipo, fila, columna){
        this.valor = valor;
        this.tipo = tipo;
        this.fila = fila;
        this.columna = columna;
    }
    function crearRespuesta(listaTokens, lista_lexicos, lista_sintacticos, ast){
        this.listaTokens = listaTokens;
        this.lista_lexicos = lista_lexicos;
        this.lista_sintacticos = lista_sintacticos;
        this.ast = ast;
    }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3: listaTokens.push(new crearToken(yy_.yytext, "palabra reservada public", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 7;
break;
case 4: listaTokens.push(new crearToken(yy_.yytext, "palabra reservada class", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 15;
break;
case 5: listaTokens.push(new crearToken(yy_.yytext, "palabra reservada interface", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 16;
break;
case 6: listaTokens.push(new crearToken(yy_.yytext, "palabra reservada void", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 58;
break;
case 7: listaTokens.push(new crearToken(yy_.yytext, "palabra reservada for", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 40;
break;
case 8: listaTokens.push(new crearToken(yy_.yytext, "palabra reservada while", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 39;
break;
case 9: listaTokens.push(new crearToken(yy_.yytext, "palabra reservada System", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 46;
break;
case 10: listaTokens.push(new crearToken(yy_.yytext, "palabra reservada out", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 48;
break;
case 11: listaTokens.push(new crearToken(yy_.yytext, "palabra reservada println", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 50;
break;
case 12: listaTokens.push(new crearToken(yy_.yytext, "palabra reservada do", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 37;
break;
case 13: listaTokens.push(new crearToken(yy_.yytext, "palabra reservada true", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 82;
break;
case 14: listaTokens.push(new crearToken(yy_.yytext, "palabra reservada false", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 83;
break;
case 15: listaTokens.push(new crearToken(yy_.yytext, "palabra reservada if", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 45;
break;
case 16: listaTokens.push(new crearToken(yy_.yytext, "palabra reservada else", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 44;
break;
case 17: listaTokens.push(new crearToken(yy_.yytext, "palabra reservada break", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'RBREAK';
break;
case 18: listaTokens.push(new crearToken(yy_.yytext, "palabra reservada continue", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'RCONTINUE';
break;
case 19: listaTokens.push(new crearToken(yy_.yytext, "palabra reservada return", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 35;
break;
case 20: listaTokens.push(new crearToken(yy_.yytext, "palabra reservada int", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 60;
break;
case 21: listaTokens.push(new crearToken(yy_.yytext, "palabra reservada boolean", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 61;
break;
case 22: listaTokens.push(new crearToken(yy_.yytext, "palabra reservada double", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 62;
break;
case 23: listaTokens.push(new crearToken(yy_.yytext, "palabra reservada String", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 63;
break;
case 24: listaTokens.push(new crearToken(yy_.yytext, "palabra reservada char", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 64;
break;
case 25: listaTokens.push(new crearToken(yy_.yytext, "palabra reservada static", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'RSTATIC';
break;
case 26: listaTokens.push(new crearToken(yy_.yytext, "palabra reservada print", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 51;
break;
case 27: listaTokens.push(new crearToken(yy_.yytext, "coma", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 55;
break;
case 28: listaTokens.push(new crearToken(yy_.yytext, "punto", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 47;
break;
case 29: listaTokens.push(new crearToken(yy_.yytext, "punto y coma", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 11;
break;
case 30: listaTokens.push(new crearToken(yy_.yytext, "llave izquierda", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 12;
break;
case 31: listaTokens.push(new crearToken(yy_.yytext, "llave derecha", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 13;
break;
case 32: listaTokens.push(new crearToken(yy_.yytext, "parentesis izquierdo", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 23;
break;
case 33: listaTokens.push(new crearToken(yy_.yytext, "parentesis derecho", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 24;
break;
case 34: listaTokens.push(new crearToken(yy_.yytext, "corchete izquiedo", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'CORIZQ';
break;
case 35: listaTokens.push(new crearToken(yy_.yytext, "corchete derecho", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'CORDER';
break;
case 36: listaTokens.push(new crearToken(yy_.yytext, "and", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 85;
break;
case 37: listaTokens.push(new crearToken(yy_.yytext, "or", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 86;
break;
case 38: listaTokens.push(new crearToken(yy_.yytext, "incremento", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 53;
break;
case 39: listaTokens.push(new crearToken(yy_.yytext, "decremento", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 54;
break;
case 40: listaTokens.push(new crearToken(yy_.yytext, "mas", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 70;
break;
case 41: listaTokens.push(new crearToken(yy_.yytext, "menos", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 67;
break;
case 42: listaTokens.push(new crearToken(yy_.yytext, "por", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 71;
break;
case 43: listaTokens.push(new crearToken(yy_.yytext, "dividido", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 72;
break;
case 44: listaTokens.push(new crearToken(yy_.yytext, "menor igual", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 78;
break;
case 45: listaTokens.push(new crearToken(yy_.yytext, "mayor igual", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 79;
break;
case 46: listaTokens.push(new crearToken(yy_.yytext, "comparacion", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 80;
break;
case 47: listaTokens.push(new crearToken(yy_.yytext, "distinto", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 81;
break;
case 48: listaTokens.push(new crearToken(yy_.yytext, "menor", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 76;
break;
case 49: listaTokens.push(new crearToken(yy_.yytext, "mayor", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 77;
break;
case 50: listaTokens.push(new crearToken(yy_.yytext, "igual", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 52;
break;
case 51: listaTokens.push(new crearToken(yy_.yytext, "negacion", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 84;
break;
case 52: listaTokens.push(new crearToken(yy_.yytext, "xor", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 87;
break;
case 53: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); listaTokens.push(new crearToken(yy_.yytext, "cadena", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 73; 
break;
case 54: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); listaTokens.push(new crearToken(yy_.yytext, "caracter", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 74; 
break;
case 55: listaTokens.push(new crearToken(yy_.yytext, "decimal", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 69;
break;
case 56: listaTokens.push(new crearToken(yy_.yytext, "entero", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 68;
break;
case 57: listaTokens.push(new crearToken(yy_.yytext, "identificador", yy_.yylloc.first_line, yy_.yylloc.first_column)); return 9;
break;
case 58:return 5;
break;
case 59: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
						errores_lexicos.push(new crearErrorL("La cadena "+ yy_.yytext + " no pertenece al lenguaje.", yy_.yylloc.first_line, yy_.yylloc.first_column));
					
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:public\b)/,/^(?:class\b)/,/^(?:interface\b)/,/^(?:void\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:System\b)/,/^(?:out\b)/,/^(?:println\b)/,/^(?:do\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:int\b)/,/^(?:boolean\b)/,/^(?:double\b)/,/^(?:String\b)/,/^(?:char\b)/,/^(?:static\b)/,/^(?:print\b)/,/^(?:,)/,/^(?:\.)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:!)/,/^(?:\^)/,/^(?:"[^\"]*")/,/^(?:'[^\']')/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[0-9]+\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}